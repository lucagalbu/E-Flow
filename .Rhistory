'switch_4h' = list(duration=c(360, 240, 240, 240, 240, 240),
medium=c('glucose', 'lactose', 'glucose', 'lactose', 'glucose', 'lactose'),
paths=list("./data/20160318_pos0", "./data/20160318_pos2") )
)
myconditions
myconditions <- list(
'lac_lowillum' = list(duration=1440, medium='lactose',
paths=c("./data/20160318_pos0", "./data/20160318_pos2") ),
'switch_4h' = list(duration=c(360, 240, 240, 240, 240, 240),
medium=c('glucose', 'lactose', 'glucose', 'lactose', 'glucose', 'lactose'),
paths=c("./data/20160318_pos0", "./data/20160318_pos2") )
)
myconditions
myconditions %>%
lapply(function(.l) data.frame(.l[[duration]], .l[[medium]]))
myconditions %>%
lapply(function(.l) data.frame(.l$duration, .l$medium))
myconditions %>%
lapply(function(.l) {
browser()
data.frame(.l$duration, .l$medium)
}
)
.l
.l$paths <- NULL
.l
as.data.frame(.l)
.l[ - which(names(.l) == "paths")]
.l
which(names(.l) == "paths")
myconditions %>%
lapply(function(.l) {
browser()
.l[ - which(names(.l) == "paths")]
data.frame(.l$duration, .l$medium)
}
)
.l[ - which(names(.l) == "paths")]
.l[ - which(names(.l) == "paths")] %>% as.data.frame
myconditions %>%
lapply(function(.l) .l[ - which(names(.l) == "paths")] %>% as.data.frame  )
myconditions %>%
lapply(function(.l) .l[ - which(names(.l) == "paths")] %>% as.data.frame ) %>%
as.data.frame
?as.data.frame
myconditions %>%
lapply(function(.l) .l[ - which(names(.l) == "paths")] %>% as.data.frame )
myconditions <- list(
list(condition='lac_lowillum', duration=1440, medium='lactose',
paths=c("./data/20160318_pos0", "./data/20160318_pos2") ),
list(condition='switch_4h',
duration=c(360, 240, 240, 240, 240, 240),
medium=c('glucose', 'lactose', 'glucose', 'lactose', 'glucose', 'lactose'),
paths=c("./data/20160318_pos0", "./data/20160318_pos2") )
)
myconditions %>%
lapply(function(.l) .l[ - which(names(.l) == "paths")] %>% as.data.frame )
myconditions %>%
lapply(function(.l) .l[ - which(names(.l) == "paths")] %>% as.data.frame ) %>%
do.call(rbind, .)
myconditions %>%
lapply(function(.l) .l[ - which(names(.l) == "paths")] %>% as.data.frame ) %>%
do.call(rbind, .)
as.data.frame
group_by(condition) %>%
mutate(t_start=cumsum(c(0, duration[-(length(duration))])) * 60,
t_end=cumsum(duration) * 60 - 1e-5,
m_cycle=value_occurence_index(medium))
myconditions %>%
lapply(function(.l) .l[ - which(names(.l) == "paths")] %>% as.data.frame ) %>%
do.call(rbind, .) %>%
group_by(condition) %>%
mutate(t_start=cumsum(c(0, duration[-(length(duration))])) * 60,
t_end=cumsum(duration) * 60 - 1e-5,
m_cycle=value_occurence_index(medium))
myconditions %>%
lapply(function(.l) .l[ - which(names(.l) %in% c("duration", "medium"))] %>% as.data.frame ) %>%
do.call(rbind, .)
myconditions %>%
lapply(function(.l) .l[ - which(names(.l) %in% c("duration", ""))] %>% as.data.frame ) %>%
do.call(rbind, .) %>%
rename(path=paths) %>%
group_by(condition, path) %>%
mutate(fpath=list.files(path, ".*\\d+\\.csv", recursive=TRUE, full.names=TRUE))
myconditions %>%
lapply(function(.l) .l[ - which(names(.l) %in% c("duration", ""))] %>% as.data.frame ) %>%
do.call(rbind, .) %>%
rename(path=paths) %>%
group_by(condition, path)
myconditions %>%
lapply(function(.l) .l[ - which(names(.l) %in% c("duration", "medium"))] %>% as.data.frame(stringsAsFactors=FALSE) )
myconditions %>%
lapply(function(.l) .l[ - which(names(.l) %in% c("duration", "medium"))] %>% as.data.frame(stringsAsFactors=FALSE) ) %>%
do.call(rbind, .)
myconditions %>%
lapply(function(.l) .l[ - which(names(.l) %in% c("duration", "medium"))] %>% as.data.frame(stringsAsFactors=FALSE) ) %>%
do.call(rbind, .) %>%
rename(path=paths) %>%
group_by(condition, path) %>%
mutate(fpath=list.files(path, ".*\\d+\\.csv", recursive=TRUE, full.names=TRUE))
myconditions %>%
lapply(function(.l) .l[ - which(names(.l) %in% c("duration", "medium"))] %>% as.data.frame(stringsAsFactors=FALSE) ) %>%
do.call(rbind, .) %>%
rename(path=paths) %>%
group_by(condition, path) %>%
do(fpath=list.files(path, ".*\\d+\\.csv", recursive=TRUE, full.names=TRUE))
myconditions %>%
lapply(function(.l) .l[ - which(names(.l) %in% c("duration", "medium"))] %>% as.data.frame(stringsAsFactors=FALSE) ) %>%
do.call(rbind, .) %>%
rename(path=paths) %>%
group_by(condition, path)
myconditions %>%
lapply(function(.l) .l[ - which(names(.l) %in% c("duration", "medium"))] %>% as.data.frame(stringsAsFactors=FALSE) ) %>%
do.call(rbind, .) %>%
rename(path=paths) %>%
group_by(condition, path) %>%
do(fpath=list.files(path, ".*\\d+\\.csv", recursive=TRUE, full.names=TRUE))
myconditions %>%
lapply(function(.l) .l[ - which(names(.l) %in% c("duration", "medium"))] %>% as.data.frame(stringsAsFactors=FALSE) ) %>%
do.call(rbind, .) %>%
rename(path=paths) %>%
group_by(condition, path) %>%
do((function(.df){
list.files(path, ".*\\d+\\.csv", recursive=TRUE, full.names=TRUE)
})(.))
myconditions %>%
lapply(function(.l) .l[ - which(names(.l) %in% c("duration", "medium"))] %>% as.data.frame(stringsAsFactors=FALSE) ) %>%
do.call(rbind, .) %>%
rename(path=paths) %>%
group_by(condition, path) %>%
do((function(.df){
list.files(.df$path, ".*\\d+\\.csv", recursive=TRUE, full.names=TRUE)
})(.))
myfiles <- myconditions %>%
lapply(function(.l) .l[ - which(names(.l) %in% c("duration", "medium"))] %>% as.data.frame(stringsAsFactors=FALSE) ) %>%
do.call(rbind, .) %>%
rename(path=paths) %>%
group_by(condition, path) %>%
do((function(.df){
list.files(.df$path, ".*\\d+\\.csv", recursive=TRUE, full.names=TRUE) %>%
data.frame(fpath=.)
})(.))
myfiles
myfiles %>% glimpse
myfiles %>% print(n=100)
myfiles %>% View
myfiles0 <- myfiles
myconditions <- list(
list(condition='lac_lowillum', duration=1440, medium='lactose',
paths=c("./data/20160318_pos0")) #,
# list(condition='switch_4h',
#      duration=c(360, 240, 240, 240, 240, 240),
#      medium=c('glucose', 'lactose', 'glucose', 'lactose', 'glucose', 'lactose'),
#      paths=c("./data/20160318_pos1", "./data/20160318_pos2"))
)
myconditions %>%
lapply(function(.l) .l[ - which(names(.l) %in% c("duration", "medium"))] %>% as.data.frame(stringsAsFactors=FALSE) ) %>%
do.call(rbind, .) %>%
rename(path=paths) %>%
group_by(condition, path) %>%
do((function(.df){
list.files(.df$path, ".*\\d+\\.csv", recursive=TRUE, full.names=TRUE) %>%
data.frame(fpath=.)
})(.))
myfiles0
myfiles0
myfiles0 %>% distinct
myfiles0 %>% View(
)
myfiles0 %>% distinct %>% View
myfiles0 %>% View
myfiles0 %>% unique %>% View
?unique
?distcint
?distinct
myfiles0
distinct(myfiles0$condition)
distinct(myfiles0 %>% select(condition))
distinct(myfiles0, condition)
distinct(myfiles0, path)
distinct(myfiles0, fpath)
myfiles0
myfiles0 %>% ungroup %>% distinct
myfiles0 %>% ungroup %>% distinct(path)
myfiles0 %>% ungroup %>% distinct(condition)
myfiles0 %>% ungroup %>% distinct()
myfiles
myfiles <- myconditions %>%
lapply(function(.l) .l[ - which(names(.l) %in% c("duration", "medium"))] %>% as.data.frame(stringsAsFactors=FALSE) ) %>%
do.call(rbind, .) %>%
rename(path=paths) %>%
group_by(condition, path) %>%
do((function(.df)
list.files(.df$path, ".*\\d+\\.csv", recursive=TRUE, full.names=TRUE) %>% data.frame(fpath=.) )(.))
myfiles
myfiles$fpath
myfiles <- myconditions %>%
lapply(function(.l) .l[ - which(names(.l) %in% c("duration", "medium"))] %>% as.data.frame(stringsAsFactors=FALSE) ) %>%
do.call(rbind, .) %>%
rename(path=paths) %>%
group_by(condition, path) %>%
do((function(.df)
list.files(.df$path, ".*\\d+\\.csv", recursive=TRUE, full.names=TRUE) %>% data.frame(fpath=., stringsAsFactors=FALSE) )(.))
myfiles
# Chunk 1: variables
dt <- 3             # frame intervall (min)
dl <- 0.065         # pixel size (Âµm)
vertical_cutoff <- 4 / dl   # after it touched this coordinate a cell is discarded
# (4um, NB E. coli is ca. 2um )
# directory of the current project
# data files are expected to be found inside `./data`
proj_path <- "~/Documents/Biozentrum/Projects/vngWetLabR/mother_machine/example/"
# directory with shared scripts
r_scripts_path <- c("~/Documents/Biozentrum/Projects/vngWetLabR/mother_machine",
"~/Documents/Biozentrum/Projects/vngWetLabR/ggplot")
perl_scripts_path <- "~/Documents/Biozentrum/Projects/vngWetLabR/mother_machine"
# preprocessed data files (produced by perl scripts) are named and saved by applying
# `data2preproc` to their path (e.g. reproduce `data` inner structure inside `preproc`):
data2preproc_dir <- function(.f)
# replace ./data with ./preproc
dirname(.f) %>% sub('/data/*', '/preproc/', .)
data2preproc_file <- function(.f)
# append _preproc.txt to the filename
basename(.f) %>% file_path_sans_ext %>% paste0("_preproc.txt")
data2preproc <- function(.path)
file.path(data2preproc_dir(.path), data2preproc_file(.path))
# Chunk 2
myconditions <- list(
list(condition='lac_lowillum', duration=1440, medium='lactose',
paths=c("./data/20160318_pos0")) #,
# list(condition='switch_4h',
#      duration=c(360, 240, 240, 240, 240, 240),
#      medium=c('glucose', 'lactose', 'glucose', 'lactose', 'glucose', 'lactose'),
#      paths=c("./data/20160318_pos1", "./data/20160318_pos2"))
)
# define global settings for knitr
knitr::opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE) # , include=FALSE
# set working environment (load all shared R scripts)
invisible(sapply(
list.files(r_scripts_path, pattern="\\.[Rr]$", full.names=TRUE, ignore.case=TRUE),
source, .GlobalEnv))
setwd(proj_path)
# set a parallel environment to run multidplyr
library(multidplyr)
numCores <- min(30, parallel::detectCores()-1) # do not use more than 30 cores
mycluster <- create_cluster(numCores)
for (.l in mylibs) { mycluster %>% cluster_library(.l) } # load all libraries on each core
myfiles <- myconditions %>%
lapply(function(.l) .l[ - which(names(.l) %in% c("duration", "medium"))] %>% as.data.frame(stringsAsFactors=FALSE) ) %>%
do.call(rbind, .) %>%
rename(data_path=paths) %>%
group_by(condition, data_path) %>%
do((function(.df)
# raw data files must be found in `./data` and matched by the following pattern .*\\d+\\.csv (e.g. *20151023.csv)
list.files(.df$data_path, ".*\\d+\\.csv", recursive=TRUE, full.names=TRUE) %>% data.frame(path=., stringsAsFactors=FALSE) )(.))
# create condition_ts (describing each temporal change of each condition) from myconditions
condition_ts <- myconditions %>%
lapply(function(.l) .l[ - which(names(.l) == "paths")] %>% as.data.frame ) %>%
do.call(rbind, .) %>%
group_by(condition) %>%
mutate(t_start=cumsum(c(0, duration[-(length(duration))])) * 60,
t_end=cumsum(duration) * 60 - 1e-5,
m_cycle=value_occurence_index(medium))
nc <- min(length(myfiles), length(mycluster)) # this is a dirty hack because multidplyr crashes with less shards than cores
myframes <- myfiles %>%
# process exported files on the cluster if required (otherwise return the list of paths)
ungroup %>%
mutate(ppath=process_moma_data(path, .data2preproc=data2preproc,
.scripts_path=perl_scripts_path, .qsub_name="MMex_pl", .force=FALSE) ) %>%
# load perl scripts output to dataframes (in parallel, using multidplyr)
partition(condition, path, cluster=mycluster[1:nc] %>%
cluster_assign_func(parse_frames_stats, compute_genealogy, which_touch_exit, which_to_progeny) %>%
cluster_assign_obj(dt, dl, vertical_cutoff))
process_state("MMex_pl")
process_state("MMex_pl")
process_state("MMex_pl")
process_state("MMex_pl")
process_state("MMex_pl")
myframes <- myfiles %>%
# process exported files on the cluster if required (otherwise return the list of paths)
ungroup %>%
mutate(ppath=process_moma_data(path, .data2preproc=data2preproc,
.scripts_path=perl_scripts_path, .qsub_name="MMex_pl", .force=FALSE) )
process_state("MMex_pl")
process_state("MMex_pl")
process_state("MMex_pl")
process_state("MMex_pl")
process_state("MMex_pl")
process_state("MMex_pl")
process_state("MMex_pl")
process_state("MMex_pl")
process_state("MMex_pl")
process_state("MMex_pl")
dir.create("qlogs") # create a directory to store logs from the queue
dir.create("qlogs", showWarnings=FALSE) # create a directory to store logs from the queue
myframes <- myfiles %>%
# process exported files on the cluster if required (otherwise return the list of paths)
ungroup %>%
mutate(ppath=process_moma_data(path, .data2preproc=data2preproc,
.scripts_path=perl_scripts_path, .qsub_name="MMex_pl", .force=FALSE) ) %>%
# load perl scripts output to dataframes (in parallel, using multidplyr)
partition(condition, path, cluster=mycluster[1:nc] %>%
cluster_assign_func(parse_frames_stats, compute_genealogy, which_touch_exit, which_to_progeny) %>%
cluster_assign_obj(dt, dl, vertical_cutoff)) %>%
# group_by(path) %>% # non-parallel alternative
do((function(.df){
parse_frames_stats(.df$ppath) %>%
mutate(time_sec=frame*dt*60, length_um=length_pixel*dl,
discard_start=(time_sec < 2*3600)) %>%
# remove frames after touching the exit
group_by(id) %>%
mutate(discard_top=which_touch_exit(vertical_top, vertical_cutoff)) %>%
mutate(discard_top=ifelse(discard_start, FALSE, discard_top)) %>% # not in the preexpt step (2h)
mutate(end_type=ifelse(any(discard_top), 'exit', end_type)) %>% # update end_type to exit for cells which have touched the vertical cutoff
# remove daughters of cells that touched the exit
ungroup %>%
mutate(discard_top=which_to_progeny(discard_top, cid))
})(.)) %>%
collect() %>%
# append useful variables (per row)
ungroup %>%
extract(path, c("date", "pos", "gl"), ".*(\\d{8})_.*pos(\\d+).*_GL(\\d+).*", remove=FALSE) %>%
mutate(cell=paste(date, pos, gl, id, sep='.'),
vertical_center=(vertical_bottom + vertical_top)/2) %>%
# propagate medium info
group_by(condition) %>%
do((function(.df){
.ts <- filter(condition_ts, condition==unique(.df$condition))
.idx <- find_unique_interval(.df$time_sec, .ts$t_start, .ts$t_end)
mutate(.df, medium=.ts$medium[.idx], m_start=.ts$t_start[.idx], m_cycle=.ts$m_cycle[.idx])
})(.)) %>%
# append useful variables (per cell)
group_by(date, pos, gl, id) %>%
mutate(start_time=first(time_sec), end_time=last(time_sec),
b_rank=round(mean(total_cell_in_lane - cell_num_in_lane)))
myframes
sessionInfo()
Sys.info()
dt <- 3             # frame intervall (min)
dl <- 0.065         # pixel size (Âµm)
vertical_cutoff <- 4 / dl   # after it touched this coordinate a cell is discarded
# (4um, NB E. coli is ca. 2um )
# directory of the current project
# data files are expected to be found inside `./data`
proj_path <- "~/Documents/Biozentrum/Projects/vngWetLabR/mother_machine/example/"
# directory with shared scripts
r_scripts_path <- c("~/Documents/Biozentrum/Projects/vngWetLabR/mother_machine",
"~/Documents/Biozentrum/Projects/vngWetLabR/ggplot")
perl_scripts_path <- "~/Documents/Biozentrum/Projects/vngWetLabR/mother_machine"
# preprocessed data files (produced by perl scripts) are named and saved by applying
# `data2preproc` to their path (e.g. reproduce `data` inner structure inside `preproc`):
data2preproc_dir <- function(.f)
# replace ./data with ./preproc
dirname(.f) %>% sub('/data/*', '/preproc/', .)
data2preproc_file <- function(.f)
# append _preproc.txt to the filename
basename(.f) %>% file_path_sans_ext %>% paste0("_preproc.txt")
data2preproc <- function(.path)
file.path(data2preproc_dir(.path), data2preproc_file(.path))
myconditions <- list(
list(condition='lac_lowillum', duration=1440, medium='lactose',
paths=c("./data/20160318_pos0")) #,
# list(condition='switch_4h',
#      duration=c(360, 240, 240, 240, 240, 240),
#      medium=c('glucose', 'lactose', 'glucose', 'lactose', 'glucose', 'lactose'),
#      paths=c("./data/20160318_pos1", "./data/20160318_pos2"))
)
# define global settings for knitr
knitr::opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE) # , include=FALSE
# set working environment (load all shared R scripts)
invisible(sapply(
list.files(r_scripts_path, pattern="\\.[Rr]$", full.names=TRUE, ignore.case=TRUE),
source, .GlobalEnv))
setwd(proj_path)
dir.create("qlogs", showWarnings=FALSE) # create a directory to store logs from the queue
# set a parallel environment to run multidplyr
library(multidplyr)
numCores <- min(30, parallel::detectCores()-1) # do not use more than 30 cores
mycluster <- create_cluster(numCores)
for (.l in mylibs) { mycluster %>% cluster_library(.l) } # load all libraries on each core
autofluo_per_um <- 422.8 # for MG1655 with 2sec illumination at 17% intensity with ND4 filter
fp_per_dn <- 1 # dummy placeholder
autofluo_predict <- function(.h) .h * autofluo_per_um
myframes <- myframes %>%
mutate(fluogfp_amplitude = fluo_amplitude - autofluo_predict(length_um),
gfp_nb = fluogfp_amplitude * fp_per_dn)
# find raw data files from myconditions and store them in a dataframe
myfiles <- myconditions %>%
# convert the relevant list items to a dataframe
lapply(function(.l) .l[ - which(names(.l) %in% c("duration", "medium"))] %>%
as.data.frame(stringsAsFactors=FALSE) ) %>%
do.call(rbind, .) %>%
rename(data_path=paths) %>%
# for each path, find all files matched by the pattern .*\\d+\\.csv (e.g. *20151023.csv)
group_by(condition, data_path) %>%
do((function(.df)
list.files(.df$data_path, ".*\\d+\\.csv", recursive=TRUE, full.names=TRUE) %>% data.frame(path=., stringsAsFactors=FALSE) )(.))
# create condition_ts (describing each temporal change of each condition) from myconditions
condition_ts <- myconditions %>%
# convert the relevant list items to a dataframe
lapply(function(.l) .l[ - which(names(.l) == "paths")] %>% as.data.frame ) %>%
do.call(rbind, .) %>%
# add useful variables for each condition step
group_by(condition) %>%
mutate(t_start=cumsum(c(0, duration[-(length(duration))])) * 60,
t_end=cumsum(duration) * 60 - 1e-5,
m_cycle=value_occurence_index(medium))
# load perl scripts output to dataframes (using parallel lapply)
nc <- min(length(myfiles), length(mycluster)) # this is a dirty hack because multidplyr crashes with less shards than cores
myframes <- myfiles %>%
# process exported files on the cluster if required (otherwise return the list of paths)
ungroup %>%
mutate(ppath=process_moma_data(path, .data2preproc=data2preproc,
.scripts_path=perl_scripts_path, .qsub_name="MMex_pl", .force=FALSE) ) %>%
# load perl scripts output to dataframes (in parallel, using multidplyr)
partition(condition, path, cluster=mycluster[1:nc] %>%
cluster_assign_func(parse_frames_stats, compute_genealogy, which_touch_exit, which_to_progeny) %>%
cluster_assign_obj(dt, dl, vertical_cutoff)) %>%
# group_by(path) %>% # non-parallel alternative
do((function(.df){
parse_frames_stats(.df$ppath) %>%
mutate(time_sec=frame*dt*60, length_um=length_pixel*dl,
discard_start=(time_sec < 2*3600)) %>%
# remove frames after touching the exit
group_by(id) %>%
mutate(discard_top=which_touch_exit(vertical_top, vertical_cutoff)) %>%
mutate(discard_top=ifelse(discard_start, FALSE, discard_top)) %>% # not in the preexpt step (2h)
mutate(end_type=ifelse(any(discard_top), 'exit', end_type)) %>% # update end_type to exit for cells which have touched the vertical cutoff
# remove daughters of cells that touched the exit
ungroup %>%
mutate(discard_top=which_to_progeny(discard_top, cid))
})(.)) %>%
collect() %>%
# append useful variables (per row)
ungroup %>%
extract(path, c("date", "pos", "gl"), ".*(\\d{8})_.*pos(\\d+).*_GL(\\d+).*", remove=FALSE, convert=TRUE) %>%
mutate_at(vars(date, pos, gl), factor) %>%
mutate(cell=paste(date, pos, gl, id, sep='.'),
vertical_center=(vertical_bottom + vertical_top)/2) %>%
# propagate medium info
group_by(condition) %>%
do((function(.df){
.ts <- filter(condition_ts, condition==unique(.df$condition))
.idx <- find_unique_interval(.df$time_sec, .ts$t_start, .ts$t_end)
mutate(.df, medium=.ts$medium[.idx], m_start=.ts$t_start[.idx], m_cycle=.ts$m_cycle[.idx])
})(.)) %>%
# append useful variables (per cell)
group_by(date, pos, gl, id) %>%
mutate(start_time=first(time_sec), end_time=last(time_sec),
b_rank=round(mean(total_cell_in_lane - cell_num_in_lane)))
autofluo_per_um <- 422.8 # for MG1655 with 2sec illumination at 17% intensity with ND4 filter
fp_per_dn <- 1 # dummy placeholder
autofluo_predict <- function(.h) .h * autofluo_per_um
myframes <- myframes %>%
mutate(fluogfp_amplitude = fluo_amplitude - autofluo_predict(length_um),
gfp_nb = fluogfp_amplitude * fp_per_dn)
mycells <- filter(myframes, condition!='switch', !discard_top) %>%
# group_by(date, pos, gl, id, parent_id, genealogy) %>%
partition(condition, date, pos, gl, id, parent_id, genealogy, cluster=mycluster) %>%
filter(!any(discard_start), end_type=='div') %>% # full cell cycles only
filter(n()>4) %>% # at least 4 time points
do((function(.df) {
# browser()
.mod_ll_t <- lm( log(length_um)~time_sec, .df)  # use fastLm() for predict
# .mod_ll_t <- fastLmPure( cbind(1, .df$time_sec), log(.df$length_um) )
.mod_lg_t <- fastLmPure( cbind(1, .df$time_sec), log(.df$gfp_nb) )
.mod_l_t <- fastLmPure( cbind(1, .df$time_sec), .df$length_um )
.mod_g_t <- fastLmPure( cbind(1, .df$time_sec), .df$gfp_nb )
.mod_g_l <- fastLmPure( cbind(1, .df$length_um), .df$gfp_nb )
.time_birth <- first(.df$time_sec)
.time_div <- last(.df$time_sec)
.logl <- predict(.mod_ll_t, se.fit=TRUE)
data.frame(npoints=.mod_ll_t$df.residual+1,
time_birth=.time_birth, time_div=.time_div,
cell_num_from_top=mean(.df$cell_num_in_lane),
cell_num_from_bottom=mean(.df$total_cell_in_lane-.df$cell_num_in_lane),
loglength_start=first(.logl$fit), loglength_startse=first(.logl$se.fit),
loglength_end=last(.logl$fit), loglength_endse=last(.logl$se.fit),
logl_time_slope=.mod_ll_t$coefficients[2], logl_time_slopesd=summary(.mod_ll_t)$coefficients[2,2],
# logl_time_slope=.mod_ll_t$coefficients[2], logl_time_slopesd=.mod_ll_t$stderr[2],
logl_time_r2=corPearson(.df$time_sec, log(.df$length_um))^2,
logg_time_slope=.mod_lg_t$coefficients[2], logg_time_slopesd=.mod_lg_t$stderr[2],
logg_time_r2=corPearson(.df$time_sec, log(.df$gfp_nb))^2,
l_time_slope=.mod_l_t$coefficients[2], l_time_slopesd=.mod_l_t$stderr[2],
l_time_r2=corPearson(.df$time_sec, .df$length_um)^2,
g_time_slope=.mod_g_t$coefficients[2], g_time_slopesd=.mod_g_t$stderr[2],
g_time_r2=corPearson(.df$time_sec, .df$gfp_nb)^2,
g_l_slope=.mod_g_l$coefficients[2], g_l_slopesd=.mod_g_l$stderr[2],
g_l_r2=corPearson(.df$length_um, log(.df$gfp_nb))^2)
})(.) ) %>%
collect() %>%
arrange(condition, date, pos, gl, id)
print(mycells)
myframes %>%
filter((date=='20160318' & pos==0 & gl==2)) %>%
filter(!discard_top, vertical_top>vertical_cutoff) %>%
mutate(time_sec=time_sec-2*3600) %>%
plot_faceted_var_tracks(.var_col='length_um', .show_cellid=TRUE, .log=TRUE) +
# mask early frames (requires a dummy df!)
geom_rect(aes(xmin=-Inf, xmax=0, ymin=0, ymax=Inf, group=1), fill='white', alpha=.6, col='transparent', data=data.frame(a=1)) +
scale_x_hours(4) +
scale_y_continuous(breaks=2:4, trans='log2') +
labs(y='length (Âµm)')
myframes %>% with(interaction(date, pos, gl)) %>% table
myframes %>% glimpse
qplot(rnorm(10))
ggplot2::qplot(rnorm(10))
library(ggplot2)
(function() theme_set(theme_bw()))
(function() theme_set(theme_bw()))()
ggplot2::qplot(rnorm(10))
ggplot2::scale_colour_discrete
